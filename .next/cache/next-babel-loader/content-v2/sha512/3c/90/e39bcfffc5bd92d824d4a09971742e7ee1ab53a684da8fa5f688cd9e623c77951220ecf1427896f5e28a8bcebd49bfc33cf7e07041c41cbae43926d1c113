{"ast":null,"code":"import _defineProperty from \"/Users/poliakovarthur/Projects/threekit/front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/poliakovarthur/Projects/threekit/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/poliakovarthur/Projects/threekit/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport isEqual from \"lodash/isEqual\";\nexport function apply2DSpin(_ref) {\n  var _ref$attrName = _ref.attrName,\n      attrName = _ref$attrName === void 0 ? \"Rotation\" : _ref$attrName,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? 1 : _ref$direction,\n      _ref$maxWidth = _ref.maxWidth,\n      maxWidth = _ref$maxWidth === void 0 ? 500 : _ref$maxWidth;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(player) {\n      var configurator;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return window.player.getConfigurator();\n\n            case 2:\n              configurator = _context.sent;\n              add2DSpin({\n                attrName: attrName,\n                configurator: configurator,\n                direction: direction,\n                maxWidth: maxWidth,\n                player: player\n              });\n              return _context.abrupt(\"return\", player);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n/****************************************************\n Handler\n****************************************************/\n\nexport function add2DSpin(_ref3, getImg) {\n  var _ref3$attrName = _ref3.attrName,\n      attrName = _ref3$attrName === void 0 ? \"Rotation\" : _ref3$attrName,\n      configurator = _ref3.configurator,\n      _ref3$direction = _ref3.direction,\n      direction = _ref3$direction === void 0 ? 1 : _ref3$direction,\n      _ref3$maxWidth = _ref3.maxWidth,\n      maxWidth = _ref3$maxWidth === void 0 ? 10 : _ref3$maxWidth,\n      player = _ref3.player;\n  var curPct = 0;\n  var attrCount = window.configurator.getAttributes().find(function (attr) {\n    return attr.name === attrName;\n  }).values.length - 1;\n  var threshold = 1 / attrCount;\n  return window.player.tools.addTool({\n    key: \"2dspin\",\n    active: true,\n    enabled: true,\n    handlers: {\n      drag: function drag() {\n        return {\n          handle: function () {\n            var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ev) {\n              var config, deltaT, newPct, curIndex, increment, newIndex, newOption;\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      config = configurator.getConfiguration();\n                      deltaT = ev.deltaX / Math.max(ev.rect.width, maxWidth);\n                      newPct = curPct + deltaT;\n\n                      if (Math.abs(newPct) > threshold) {\n                        curIndex = getOptionIndex(configurator, attrName, config[attrName]);\n                        increment = (newPct > 0 ? 1 : -1) * (direction < 0 ? -1 : 1);\n                        newIndex = (curIndex + increment) % attrCount;\n                        newOption = getOptionByIndex(configurator, attrName, newIndex < 0 ? attrCount + newIndex : newIndex);\n                        configurator.setConfiguration(_defineProperty({}, attrName, newOption));\n                      }\n\n                      curPct = newPct % threshold;\n\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            function handle(_x2) {\n              return _handle.apply(this, arguments);\n            }\n\n            return handle;\n          }(),\n          momentum: true\n        };\n      }\n    }\n  });\n}\n\nfunction getOptionByIndex(configurator, attrName, index) {\n  if (!configurator) return null;\n  var attrs = configurator.getAttributes();\n  var attribute = attrs.find(function (attr) {\n    return attr.name === attrName;\n  });\n  return attribute.values[index];\n}\n\nfunction getOptionIndex(configurator, attrName, option) {\n  if (!configurator) return null;\n  var attrs = configurator.getAttributes();\n  var attribute = attrs.find(function (attr) {\n    return attr.name === attrName;\n  });\n  return attribute.values.findIndex(function (val) {\n    return isEqual(val, option);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}