{"ast":null,"code":"import _defineProperty from \"/Users/poliakovarthur/Projects/threekit/front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/poliakovarthur/Projects/threekit/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/poliakovarthur/Projects/threekit/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport isEqual from \"lodash/isEqual\";\nexport function apply2DSpin(_ref) {\n  var _ref$attrName = _ref.attrName,\n      attrName = _ref$attrName === void 0 ? \"Rotation\" : _ref$attrName,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? 1 : _ref$direction,\n      _ref$maxWidth = _ref.maxWidth,\n      maxWidth = _ref$maxWidth === void 0 ? 500 : _ref$maxWidth;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(player) {\n      var configurator;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return window.player.getConfigurator();\n\n            case 2:\n              configurator = _context.sent;\n              add2DSpin({\n                attrName: attrName,\n                configurator: configurator,\n                direction: direction,\n                maxWidth: maxWidth,\n                player: player\n              });\n              return _context.abrupt(\"return\", player);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n/****************************************************\n Handler\n****************************************************/\n\nexport function add2DSpin(_ref3, getImg) {\n  var _ref3$attrName = _ref3.attrName,\n      attrName = _ref3$attrName === void 0 ? \"Rotation\" : _ref3$attrName,\n      configurator = _ref3.configurator,\n      _ref3$direction = _ref3.direction,\n      direction = _ref3$direction === void 0 ? 1 : _ref3$direction,\n      _ref3$maxWidth = _ref3.maxWidth,\n      maxWidth = _ref3$maxWidth === void 0 ? 10 : _ref3$maxWidth,\n      player = _ref3.player;\n  var curPct = 0;\n  var attrCount = window.configurator.getAttributes().find(function (attr) {\n    return attr.name === attrName;\n  }).values.length - 1;\n  var threshold = 1 / attrCount;\n  return window.player.tools.addTool({\n    key: \"2dspin\",\n    active: true,\n    enabled: true,\n    handlers: {\n      drag: function drag() {\n        return {\n          handle: function () {\n            var _handle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ev) {\n              var config, deltaT, newPct, curIndex, increment, newIndex, newOption;\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      config = configurator.getConfiguration();\n                      deltaT = ev.deltaX / Math.max(ev.rect.width, maxWidth);\n                      newPct = curPct + deltaT;\n\n                      if (Math.abs(newPct) > threshold) {\n                        curIndex = getOptionIndex(configurator, attrName, config[attrName]);\n                        increment = (newPct > 0 ? 1 : -1) * (direction < 0 ? -1 : 1);\n                        newIndex = (curIndex + increment) % attrCount;\n                        newOption = getOptionByIndex(configurator, attrName, newIndex < 0 ? attrCount + newIndex : newIndex);\n                        configurator.setConfiguration(_defineProperty({}, attrName, newOption));\n                      }\n\n                      curPct = newPct % threshold;\n\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            function handle(_x2) {\n              return _handle.apply(this, arguments);\n            }\n\n            return handle;\n          }(),\n          momentum: true\n        };\n      }\n    }\n  });\n}\n\nfunction getOptionByIndex(configurator, attrName, index) {\n  if (!configurator) return null;\n  var attrs = configurator.getAttributes();\n  var attribute = attrs.find(function (attr) {\n    return attr.name === attrName;\n  });\n  return attribute.values[index];\n}\n\nfunction getOptionIndex(configurator, attrName, option) {\n  if (!configurator) return null;\n  var attrs = configurator.getAttributes();\n  var attribute = attrs.find(function (attr) {\n    return attr.name === attrName;\n  });\n  return attribute.values.findIndex(function (val) {\n    return isEqual(val, option);\n  });\n}","map":{"version":3,"sources":["/Users/poliakovarthur/Projects/threekit/front/lib/spin.js"],"names":["isEqual","apply2DSpin","attrName","direction","maxWidth","player","window","getConfigurator","configurator","add2DSpin","getImg","curPct","attrCount","getAttributes","find","attr","name","values","length","threshold","tools","addTool","key","active","enabled","handlers","drag","handle","ev","config","getConfiguration","deltaT","deltaX","Math","max","rect","width","newPct","abs","curIndex","getOptionIndex","increment","newIndex","newOption","getOptionByIndex","setConfiguration","momentum","index","attrs","attribute","option","findIndex","val"],"mappings":"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","sourcesContent":["import isEqual from \"lodash/isEqual\";\nexport function apply2DSpin({\n  attrName = \"Rotation\",\n  direction = 1,\n  maxWidth = 500,\n}) {\n  return async (player) => {\n    const configurator = await window.player.getConfigurator();\n    add2DSpin({ attrName, configurator, direction, maxWidth, player });\n    return player;\n  };\n}\n/****************************************************\n Handler\n****************************************************/\nexport function add2DSpin(\n  { attrName = \"Rotation\", configurator, direction = 1, maxWidth = 10, player },\n  getImg\n) {\n  let curPct = 0;\n  const attrCount =\n    window.configurator.getAttributes().find((attr) => attr.name === attrName)\n      .values.length - 1;\n  const threshold = 1 / attrCount;\n  return window.player.tools.addTool({\n    key: \"2dspin\",\n    active: true,\n    enabled: true,\n    handlers: {\n      drag: () => ({\n        handle: async (ev) => {\n          const config = configurator.getConfiguration();\n          const deltaT = ev.deltaX / Math.max(ev.rect.width, maxWidth);\n          const newPct = curPct + deltaT;\n          if (Math.abs(newPct) > threshold) {\n            const curIndex = getOptionIndex(\n              configurator,\n              attrName,\n              config[attrName]\n            );\n            const increment = (newPct > 0 ? 1 : -1) * (direction < 0 ? -1 : 1);\n            const newIndex = (curIndex + increment) % attrCount;\n            const newOption = getOptionByIndex(\n              configurator,\n              attrName,\n              newIndex < 0 ? attrCount + newIndex : newIndex\n            );\n            configurator.setConfiguration({ [attrName]: newOption });\n          }\n          curPct = newPct % threshold;\n        },\n        momentum: true,\n      }),\n    },\n  });\n}\nfunction getOptionByIndex(configurator, attrName, index) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find((attr) => attr.name === attrName);\n  return attribute.values[index];\n}\nfunction getOptionIndex(configurator, attrName, option) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find((attr) => attr.name === attrName);\n  return attribute.values.findIndex((val) => isEqual(val, option));\n}\n"]},"metadata":{},"sourceType":"module"}