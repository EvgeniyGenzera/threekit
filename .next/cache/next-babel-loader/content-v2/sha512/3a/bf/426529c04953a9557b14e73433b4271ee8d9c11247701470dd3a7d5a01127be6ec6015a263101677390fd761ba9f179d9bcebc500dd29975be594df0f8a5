{"ast":null,"code":"import isEqual from \"lodash/isEqual\";\nexport function apply2DSpin({\n  attrName = \"Rotation\",\n  direction = 1,\n  maxWidth = 500\n}) {\n  return async player => {\n    const configurator = await window.player.getConfigurator();\n    add2DSpin({\n      attrName,\n      configurator,\n      direction,\n      maxWidth,\n      player\n    });\n    return player;\n  };\n}\n/****************************************************\n Handler\n****************************************************/\n\nexport function add2DSpin({\n  attrName = \"Rotation\",\n  configurator,\n  direction = 1,\n  maxWidth = 10,\n  player\n}, getImg) {\n  let curPct = 0;\n  const attrCount = window.configurator.getAttributes().find(attr => attr.name === attrName).values.length - 1;\n  const threshold = 1 / attrCount;\n  return window.player.tools.addTool({\n    key: \"2dspin\",\n    active: true,\n    enabled: true,\n    handlers: {\n      drag: () => ({\n        handle: async ev => {\n          const config = configurator.getConfiguration();\n          const deltaT = ev.deltaX / Math.max(ev.rect.width, maxWidth);\n          const newPct = curPct + deltaT;\n\n          if (Math.abs(newPct) > threshold) {\n            const curIndex = getOptionIndex(configurator, attrName, config[attrName]);\n            const increment = (newPct > 0 ? 1 : -1) * (direction < 0 ? -1 : 1);\n            const newIndex = (curIndex + increment) % attrCount;\n            const newOption = getOptionByIndex(configurator, attrName, newIndex < 0 ? attrCount + newIndex : newIndex);\n            configurator.setConfiguration({\n              [attrName]: newOption\n            });\n          }\n\n          curPct = newPct % threshold;\n        },\n        momentum: true\n      })\n    }\n  });\n}\n\nfunction getOptionByIndex(configurator, attrName, index) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find(attr => attr.name === attrName);\n  return attribute.values[index];\n}\n\nfunction getOptionIndex(configurator, attrName, option) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find(attr => attr.name === attrName);\n  return attribute.values.findIndex(val => isEqual(val, option));\n}","map":{"version":3,"sources":["/Users/poliakovarthur/Projects/threekit/front/lib/spin.js"],"names":["isEqual","apply2DSpin","attrName","direction","maxWidth","player","configurator","window","getConfigurator","add2DSpin","getImg","curPct","attrCount","getAttributes","find","attr","name","values","length","threshold","tools","addTool","key","active","enabled","handlers","drag","handle","ev","config","getConfiguration","deltaT","deltaX","Math","max","rect","width","newPct","abs","curIndex","getOptionIndex","increment","newIndex","newOption","getOptionByIndex","setConfiguration","momentum","index","attrs","attribute","option","findIndex","val"],"mappings":"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","sourcesContent":["import isEqual from \"lodash/isEqual\";\nexport function apply2DSpin({\n  attrName = \"Rotation\",\n  direction = 1,\n  maxWidth = 500,\n}) {\n  return async (player) => {\n    const configurator = await window.player.getConfigurator();\n    add2DSpin({ attrName, configurator, direction, maxWidth, player });\n    return player;\n  };\n}\n/****************************************************\n Handler\n****************************************************/\nexport function add2DSpin(\n  { attrName = \"Rotation\", configurator, direction = 1, maxWidth = 10, player },\n  getImg\n) {\n  let curPct = 0;\n  const attrCount =\n    window.configurator.getAttributes().find((attr) => attr.name === attrName)\n      .values.length - 1;\n  const threshold = 1 / attrCount;\n  return window.player.tools.addTool({\n    key: \"2dspin\",\n    active: true,\n    enabled: true,\n    handlers: {\n      drag: () => ({\n        handle: async (ev) => {\n          const config = configurator.getConfiguration();\n          const deltaT = ev.deltaX / Math.max(ev.rect.width, maxWidth);\n          const newPct = curPct + deltaT;\n          if (Math.abs(newPct) > threshold) {\n            const curIndex = getOptionIndex(\n              configurator,\n              attrName,\n              config[attrName]\n            );\n            const increment = (newPct > 0 ? 1 : -1) * (direction < 0 ? -1 : 1);\n            const newIndex = (curIndex + increment) % attrCount;\n            const newOption = getOptionByIndex(\n              configurator,\n              attrName,\n              newIndex < 0 ? attrCount + newIndex : newIndex\n            );\n            configurator.setConfiguration({ [attrName]: newOption });\n          }\n          curPct = newPct % threshold;\n        },\n        momentum: true,\n      }),\n    },\n  });\n}\nfunction getOptionByIndex(configurator, attrName, index) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find((attr) => attr.name === attrName);\n  return attribute.values[index];\n}\nfunction getOptionIndex(configurator, attrName, option) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find((attr) => attr.name === attrName);\n  return attribute.values.findIndex((val) => isEqual(val, option));\n}\n"]},"metadata":{},"sourceType":"module"}