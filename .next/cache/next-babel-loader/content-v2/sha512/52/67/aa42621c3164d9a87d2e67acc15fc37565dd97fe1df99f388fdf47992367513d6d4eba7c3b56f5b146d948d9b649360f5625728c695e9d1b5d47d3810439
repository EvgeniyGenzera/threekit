{"ast":null,"code":"import isEqual from \"lodash/isEqual\";\nexport function apply2DSpin({\n  attrName = \"Rotation\",\n  direction = 1,\n  maxWidth = 500\n}) {\n  return async player => {\n    const configurator = await window.player.getConfigurator();\n    add2DSpin({\n      attrName,\n      configurator,\n      direction,\n      maxWidth,\n      player\n    });\n    return player;\n  };\n}\n/****************************************************\n Handler\n****************************************************/\n\nexport function add2DSpin({\n  attrName = \"Rotation\",\n  configurator,\n  direction = 1,\n  maxWidth = 10,\n  player\n}, getImg) {\n  let curPct = 0;\n  const attrCount = window.configurator.getAttributes().find(attr => attr.name === attrName).values.length - 1;\n  const threshold = 1 / attrCount;\n  return window.player.tools.addTool({\n    key: \"2dspin\",\n    active: true,\n    enabled: true,\n    handlers: {\n      drag: () => ({\n        handle: async ev => {\n          const config = configurator.getConfiguration();\n          const deltaT = ev.deltaX / Math.max(ev.rect.width, maxWidth);\n          const newPct = curPct + deltaT;\n\n          if (Math.abs(newPct) > threshold) {\n            const curIndex = getOptionIndex(configurator, attrName, config[attrName]);\n            const increment = (newPct > 0 ? 1 : -1) * (direction < 0 ? -1 : 1);\n            const newIndex = (curIndex + increment) % attrCount;\n            const newOption = getOptionByIndex(configurator, attrName, newIndex < 0 ? attrCount + newIndex : newIndex);\n            configurator.setConfiguration({\n              [attrName]: newOption\n            });\n          }\n\n          curPct = newPct % threshold;\n        },\n        momentum: true\n      })\n    }\n  });\n}\n\nfunction getOptionByIndex(configurator, attrName, index) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find(attr => attr.name === attrName);\n  return attribute.values[index];\n}\n\nfunction getOptionIndex(configurator, attrName, option) {\n  if (!configurator) return null;\n  const attrs = configurator.getAttributes();\n  const attribute = attrs.find(attr => attr.name === attrName);\n  return attribute.values.findIndex(val => isEqual(val, option));\n}","map":null,"metadata":{},"sourceType":"module"}